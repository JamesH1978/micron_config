
# Use:
# - DUMP_PARAMETER                            print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST'    print the defined parameter group
# - DUMP_PARAMETER C='printer'                print the defined config values
# - DUMP_PARAMETER S='printer'                print the defined settings values
[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C
           else 'settings' if params.S %}
  {% set search = params.C if params.C
             else params.S if params.S
             else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
    {% if config %} ; print the searched printer.configfile[path] parameter
      {% if name1 is in ['configfile'] %}
        {% for name2 in printer[name1][path]|sort %}
          {% if name2 is in [search] %}
            {% for name3, value in printer[name1][path][name2].items()|sort %}
              {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" %
                          (path, name2, name3, value)) %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% else %}
      {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
        {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {% if out|length > 0 %}
    {action_respond_info(out|join("\n"))}
  {% else %}
    {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-1} MAXIMUM={s+1}
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+1}
     {% endif %}

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE_BASE
gcode:
  {% set HEATER = params.HEATER|default(extruder)|string %}
  {% set TARGET = params.TARGET|default(0)|float %}

  {% if params.HEATER == "extruder" %}
      M104 S{TARGET}
      M117 Extruder
  {% elif params.HEATER == "heater_bed" %}
      M140 S{TARGET}
      M117 Bed
  {% else %}
    M117 Nothing
  {% endif %}

[gcode_macro SOAK_BED]
gcode:
  SET_IDLE_TIMEOUT TIMEOUI=1800
  G28
  G0 X117.5 Y117.5 Z50 F6000
  M106 S77
  M140 S100

[gcode_macro clear_Z_offset]
description: reset Z offset to zero
gcode:
  SET_GCODE_OFFSET Z=0 

[gcode_macro probe_prep]
description: Heat bed and attach probe
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60) %}
  M190 S{BED_TEMP}
  G28 lock_probe=1
    
[gcode_macro dock_probe]
gcode:
  probe_detach force=1

[gcode_macro mesh]
description: Heat bed, attach probe, home, mesh, detach probe
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60) %}
  M190 S{BED_TEMP}
  G28 lock_probe=1
  bed_mesh_calibrate
  probe_detach force=1

[gcode_macro M600]
gcode:
        SAVE_GCODE_STATE NAME=M600_state
        PAUSE_BASE
        G91
        G1 E-5 F4000
        G1 Z+10
        G90
        G1 X171 Y171 F3000
        G92 E0

[gcode_macro SWAP_RESUME] 
gcode:
    RESTORE_GCODE_STATE NAME=M600_state
    resume

[gcode_macro PRIME_LINE]
gcode:
  M117 Prime Line
  G92 E0
  G1 Z2.0 F3000
  G1 X20 Y30 Z0.28 F5000.0
  G1 X20 Y200.0 Z0.28 F1500.0 E15
  G1 X22 Y200.0 Z0.28 F5000.0
  G1 X22 Y50 Z0.28 F1500.0 E30
  G92 E0
  G1 Z2.0 F3000

[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  #M117 Homing
  G4 P2000
  G90
  SET_GCODE_OFFSET Z=0.0
  M117 Waiting for full bed temperature
  M190 S{BED_TEMP}
  #M117 Waiting for Enclosure temperature
  #TEMPERATURE_WAIT SENSOR='temperature_sensor Enclosure' MINIMUM=40
  M117 Homing and Probing
  G28
  QUAD_GANTRY_LEVEL 
  G0 X90 Y90
  G28 Z
  BED_MESH_CALIBRATE ADAPTIVE=1
  SMART_PARK
  M109 S{EXTRUDER_TEMP}
  LINE_PURGE
  M117 Printing...

[gcode_macro END_PRINT]
gcode:
  M117 Done Printing :)
  G91
  G1 E-10 Z+10 F3000
  G90
  G1 X10 Y150 F2000
  M104 S0
  M140 S0
  M84 X Y E
  #BED_MESH_CLEAR
 # UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=120

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  POWER_OFF_PRINTER

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for name1 in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (name1.type, name1.section, name1.option, name1.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}

[gcode_macro _KAMP_Settings]
description: This macro contains all adjustable settings for KAMP 

# The following variables are settings for KAMP as a whole.
variable_verbose_enable: True               # Set to True to enable KAMP information output when running. This is useful for debugging.

# The following variables are for adjusting adaptive mesh settings for KAMP.
variable_mesh_margin: 0                     # Expands the mesh size in millimeters if desired. Leave at 0 to disable.
variable_fuzz_amount: 0                     # Slightly randomizes mesh points to spread out wear from nozzle-based probes. Leave at 0 to disable.

# The following variables are for those with a dockable probe like Klicky, Euclid, etc.                 # ----------------  Attach Macro | Detach Macro
variable_probe_dock_enable: False           # Set to True to enable the usage of a dockable probe.      # ---------------------------------------------
variable_attach_macro: 'Attach_Probe'       # The macro that is used to attach the probe.               # Klicky Probe:   'Attach_Probe' | 'Dock_Probe'
variable_detach_macro: 'Dock_Probe'         # The macro that is used to store the probe.                # Euclid Probe:   'Deploy_Probe' | 'Stow_Probe'
                                                                                                        # Legacy Gcode:   'M401'         | 'M402'

# The following variables are for adjusting adaptive purge settings for KAMP.
variable_purge_height: 0.8                  # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 10                    # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_margin: 20                   # Distance the purge will be in front of the print area, default is 10.
variable_purge_amount: 30                   # Amount of filament to be purged prior to printing.
variable_flow_rate: 12                      # Flow rate of purge in mm3/s. Default is 12.

# The following variables are for adjusting the Smart Park feature for KAMP, which will park the printhead near the print area at a specified height.
variable_smart_park_height: 10              # Z position for Smart Park, default is 10.

gcode: # Gcode section left intentionally blank. Do not disturb.

    {action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
# variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
# variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
# variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[gcode_macro WLED_ON]
description: Turn WLED strip on using optional preset and resets led colors
gcode:
  {% set strip = params.STRIP|string %}
  {% set preset = params.PRESET|default(-1)|int %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=True,
                             preset=preset)}

[gcode_macro WLED_OFF]
description: Turn WLED strip off
gcode:
  {% set strip = params.STRIP|string %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=False)}

[gcode_macro _set_leds]
gcode:
    {% if printer.extruder.target == 0 %}
        # the extrude heater is off
    {% else %}
        # the extrude heater is on
        {% if printer.idle_timeout.state == "Printing" %}
            # we are printing
            # progress is in the display_status object
            {% set perc = printer.display_status.progress %}
            # set this to how many leds you have for your bar
            {% set numleds = 47 %}
            {% set last = (perc|float * numleds|float)|int %}
            {% for n in range(numleds) %}
                {% if n < last %}
                    SET_WLED STRIP=alias RED=0 GREEN=1 BLUE=0 TRANSMIT=0 index={ n + 1|int }
                {% else %}
                    SET_WLED STRIP=alias RED=1 GREEN=0 BLUE=0 TRANSMIT=0 index={ n + 1|int }
                {% endif %}
            {% endfor %}
            # now actually transmit it
            SET_WLED STRIP=alias RED=0.3 GREEN=0.3 BLUE=0.3 TRANSMIT=1 INDEX={ last + 1|int }
        {% endif %}
    {% endif %}

[gcode_macro SET_WLED]
description: SET_LED like functionality for WLED, applies to all active segments
gcode:
    {% set strip = params.STRIP|string %}
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set index = params.INDEX|default(-1)|int %}
    {% set transmit = params.TRANSMIT|default(1)|int %}

    {action_call_remote_method("set_wled",
                               strip=strip,
                               red=red, green=green, blue=blue, white=white,
                               index=index, transmit=transmit)}
[delayed_gcode _update_leds_loop]
initial_duration: 5
gcode:
    _set_leds
    UPDATE_DELAYED_GCODE ID=_update_leds_loop DURATION=60

[gcode_macro BED_OFFSET_CORRECTION]
gcode:
    {% set curr_bed_type = params.BED_TYPE %}
    {% set bed_type_offsets = {
        "Textured": -0.05,
        "Cool": -0.1,  
        "Engineering": -0.15,
        "High": -0.1,
    } %}
    
    {% if curr_bed_type in bed_type_offsets %}
      SET_GCODE_OFFSET Z={bed_type_offsets[curr_bed_type]}
      m118 i am {bed_type_offsets[curr_bed_type]}
    {% else %}
      SET_GCODE_OFFSET Z=0.0
      m118 moop
    {% endif %}

[gcode_macro PUSHOVER]
gcode:
  {% set message = params.MESSAGE|default("nope")|string %}
  {action_call_remote_method("notify",
                              name="pushover",
                              message=message)}
  M118 {message}
